name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run gofmt
      run: |
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "The following files are not formatted properly:"
          echo "$unformatted"
          echo ""
          echo "Please run 'gofmt -s -w .' to fix formatting issues"
          echo "Or run 'make fmt' if available in your Makefile"
          exit 1
        fi
        echo "All files are properly formatted"
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run unit tests
      run: go test -v -short -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Build binary
      run: go build -o bin/edgar ./cmd/edgar
    
    - name: Test binary help
      run: ./bin/edgar -h || echo "Expected help exit code"

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-test'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run integration tests
      run: INTEGRATION_TESTS=true go test -v -timeout 5m -tags=integration ./pkg/edgar/
      env:
        # Add delay between requests to respect SEC rate limits
        TEST_DELAY_MS: 200

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Run Gosec Security Scanner
      uses: securego/github-action-gosec@master
      with:
        args: './...'

  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      run: |
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o bin/edgar-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/edgar
        # Add .exe extension for Windows
        if [ "${{ matrix.goos }}" = "windows" ]; then
          mv bin/edgar-${{ matrix.goos }}-${{ matrix.goarch }} bin/edgar-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: edgar-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/edgar-*

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'go'
        output-file-path: benchmark.txt
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
